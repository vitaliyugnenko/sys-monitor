{"version":3,"sources":["chart.js","App.js","index.js"],"names":["Chart","start","setState","connection","WebSocket","host","SendMessage","state","send","JSON","stringify","type","nickname","text","onerror","error","console","log","cpu","color","mem","window","location","origin","replace","HandleChange","bind","data","this","freeMem","totalMem","time","date","cpu_color","mem_color","onopen","onmessage","message","mess","parse","onclose","prevProps","prevState","width","height","boxShadow","margin","transition","backgroundColor","className","style","id","Component","App","ReactDOM","render","document","getElementById"],"mappings":"8LA8HeA,G,wDA1HX,aAAe,IAAD,8BACV,gBA2BJC,MAAQ,kBACJ,EAAKC,SAAS,CACVC,WAAY,IAAIC,UACZ,EAAKC,SA/BH,EAmCdC,YAAc,WACV,IAAIH,EAAa,EAAKI,MAAMJ,WAC5BA,EAAWK,KACPC,KAAKC,UAAU,CACXC,KAAM,UACNC,SAAU,OACVC,KAAM,qBAGdV,EAAWW,QAAU,SAAUC,GAC3BC,QAAQC,IAAR,kBAAuBF,MA3C3B,EAAKR,MAAQ,CACTW,IAAK,EACLC,MAAO,GACPC,IAAK,EACLjB,WAAY,IAAIC,UAAUiB,OAAOC,SAASC,OAAOC,QAAQ,QAAS,QAG7E,EAAKnB,KAAOgB,OAAOC,SAASC,OAAOC,QAAQ,QAAS,MAE7C,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKpB,YAAc,EAAKA,YAAYoB,KAAjB,gBAZT,E,yDAeDC,GACTC,KAAK1B,SAAS,CACVgB,IAAKS,EAAKT,IACVE,IAAKO,EAAKP,IACVS,QAASF,EAAKE,QACdC,SAAUH,EAAKG,SACfC,KAAMJ,EAAKI,KACXC,KAAML,EAAKK,KACXC,UAAWN,EAAKT,IAAM,GAAK,QAAU,MACrCgB,UAAWP,EAAKP,IAAM,GAAK,QAAU,U,0CAyBxB,IAAD,OAEZjB,EAAayB,KAAKrB,MAAMJ,WAC5BA,EAAWgC,OAAS,WAChB,EAAK7B,eAETH,EAAWiC,UAAY,SAACC,GACpB,IAAIC,EAAO7B,KAAK8B,MAAMF,EAAQV,MAC9B,EAAKF,aAAaa,IAEtBnC,EAAWqC,QAAU,kBAAM,EAAKvC,SAChCe,QAAQC,IAAI,a,yCAGGwB,EAAWC,GAAY,IAAD,OACrC,GAAIA,EAAUvC,aAAeyB,KAAKrB,MAAMJ,WAAY,CAChD,IAAIA,EAAayB,KAAKrB,MAAMJ,WAC5BA,EAAWgC,OAAS,WAChB,EAAK7B,eAETH,EAAWiC,UAAY,SAACC,GACpB,IAAIC,EAAO7B,KAAK8B,MAAMF,EAAQV,MAC9B,EAAKF,aAAaa,IAEtBnC,EAAWqC,QAAU,kBAAM,EAAKvC,Y,+BAKpC,IAAIiB,EAAM,CACNyB,MAAM,GAAD,OAAKf,KAAKrB,MAAMW,IAAhB,KACL0B,OAAQ,OACRC,UAAW,2BACXC,OAAQ,MACRC,WAAY,OACZC,gBAAgB,GAAD,OAAKpB,KAAKrB,MAAM0B,YAG/Bb,EAAM,CACNuB,MAAM,GAAD,OAAKf,KAAKrB,MAAMa,IAAhB,KACLwB,OAAQ,OACRC,UAAW,2BACXC,OAAQ,MACRC,WAAY,OACZC,gBAAgB,GAAD,OAAKpB,KAAKrB,MAAM2B,YAGnC,OACI,yBAAKe,UAAU,aACX,yBAAKA,UAAU,YACX,6BAAMrB,KAAKrB,MAAMwB,MADrB,IACiC,6BAAMH,KAAKrB,MAAMyB,OAElD,yBAAKiB,UAAU,OACX,yBAAKA,UAAU,cAAf,aACA,yBAAKA,UAAU,kBACX,yBAAKC,MAAOhC,EAAKiC,GAAG,aACpB,2BAAIvB,KAAKrB,MAAMW,IAAf,OAGR,yBAAK+B,UAAU,UACX,yBAAKA,UAAU,iBAAf,gBACA,qCAAWrB,KAAKrB,MAAMuB,SAAtB,MACA,oCAAUF,KAAKrB,MAAMsB,QAArB,MACA,yBAAKoB,UAAU,kBACX,yBAAKC,MAAO9B,EAAK+B,GAAG,gBACpB,2BAAIvB,KAAKrB,MAAMa,IAAf,Y,GAnHJgC,cCAL,SAASC,IACpB,OAAO,kBAAC,EAAD,MCAXC,IAASC,OAAO,kBAACF,EAAD,MAASG,SAASC,eAAe,U","file":"static/js/main.4fb54b28.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Chart extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cpu: 0,\r\n            color: \"\",\r\n            mem: 0,\r\n            connection: new WebSocket(window.location.origin.replace(/^http/, 'ws'))\r\n        };\r\n\r\n\tthis.host = window.location.origin.replace(/^http/, 'ws');\r\n\r\n        this.HandleChange = this.HandleChange.bind(this);\r\n        this.SendMessage = this.SendMessage.bind(this);\r\n    }\r\n\r\n    HandleChange(data) {\r\n        this.setState({\r\n            cpu: data.cpu,\r\n            mem: data.mem,\r\n            freeMem: data.freeMem,\r\n            totalMem: data.totalMem,\r\n            time: data.time,\r\n            date: data.date,\r\n            cpu_color: data.cpu < 50 ? \"green\" : \"red\",\r\n            mem_color: data.mem < 50 ? \"green\" : \"red\",\r\n        });\r\n    }\r\n\r\n    start = () =>\r\n        this.setState({\r\n            connection: new WebSocket(\r\n                this.host\r\n            ),\r\n        });\r\n\r\n    SendMessage = () => {\r\n        let connection = this.state.connection;\r\n        connection.send(\r\n            JSON.stringify({\r\n                type: \"message\",\r\n                nickname: \"name\",\r\n                text: \"outgoingMessage\",\r\n            })\r\n        );\r\n        connection.onerror = function (error) {\r\n            console.log(`ERROR - ${error}`);\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        \r\n        let connection = this.state.connection;\r\n        connection.onopen = () => {\r\n            this.SendMessage();\r\n        };\r\n        connection.onmessage = (message) => {\r\n            let mess = JSON.parse(message.data);\r\n            this.HandleChange(mess);\r\n        };\r\n        connection.onclose = () => this.start();\r\n        console.log(123456789);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.connection !== this.state.connection) {\r\n            let connection = this.state.connection;\r\n            connection.onopen = () => {\r\n                this.SendMessage();\r\n            };\r\n            connection.onmessage = (message) => {\r\n                let mess = JSON.parse(message.data);\r\n                this.HandleChange(mess);\r\n            };\r\n            connection.onclose = () => this.start();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let cpu = {\r\n            width: `${this.state.cpu}%`,\r\n            height: \"100%\",\r\n            boxShadow: \"0 0 10px rgba(0,0,0,0.5)\",\r\n            margin: \"5px\",\r\n            transition: \"0.5s\",\r\n            backgroundColor: `${this.state.cpu_color}`,\r\n        };\r\n\r\n        let mem = {\r\n            width: `${this.state.mem}%`,\r\n            height: \"100%\",\r\n            boxShadow: \"0 0 10px rgba(0,0,0,0.5)\",\r\n            margin: \"5px\",\r\n            transition: \"0.5s\",\r\n            backgroundColor: `${this.state.mem_color}`,\r\n        };\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"dateTime\">\r\n                    <div>{this.state.time}</div> <div>{this.state.date}</div>\r\n                </div>\r\n                <div className=\"cpu\">\r\n                    <div className=\"cpu__title\">CPU Usage</div>\r\n                    <div className=\"val__container\">\r\n                        <div style={cpu} id=\"cpu__val\"></div>\r\n                        <p>{this.state.cpu}%</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"memory\">\r\n                    <div className=\"memory__title\">Memory Usage</div>\r\n                    <p>Total: {this.state.totalMem}Gb</p>\r\n                    <p>Free: {this.state.freeMem}Gb</p>\r\n                    <div className=\"val__container\">\r\n                        <div style={mem} id=\"memory__val\"></div>\r\n                        <p>{this.state.mem}%</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\nimport Chart from \"./chart\";\n\nexport default function App() {\n    return <Chart />;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}